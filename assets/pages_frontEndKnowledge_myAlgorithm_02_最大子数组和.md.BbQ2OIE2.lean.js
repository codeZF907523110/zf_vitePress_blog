import{_ as a,c as n,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const y=JSON.parse('{"title":"最大子数组和","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/02_最大子数组和.md","filePath":"pages/frontEndKnowledge/myAlgorithm/02_最大子数组和.md","lastUpdated":1744461726000}'),e={name:"pages/frontEndKnowledge/myAlgorithm/02_最大子数组和.md"};function o(r,s,t,c,D,i){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="最大子数组和" tabindex="-1">最大子数组和 <a class="header-anchor" href="#最大子数组和" aria-label="Permalink to &quot;最大子数组和&quot;">​</a></h1><blockquote><p>力扣id: 53 <a href="https://leetcode.cn/problems/maximum-subarray/description/" target="_blank" rel="noreferrer">最大子数组和</a></p></blockquote><blockquote><p>题目： 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 子数组，是数组中的一个连续部分。</p></blockquote><blockquote><p>示例 1：</p><blockquote><p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</p><p>输出：6</p><p>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p></blockquote></blockquote><blockquote><p>思路：</p><ul><li>创建一个变量 preNum，用于记录当前连续子数组的和，初始值为第一个元素。</li><li>创建一个变量 maxNum，用于记录最大和，初始值为第一个元素。</li></ul></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> maxSubArray</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> preNum</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> maxNum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">    preNum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">preNum</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">    maxNum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">maxNum</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">preNum</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> maxNum</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,6)]))}const u=a(e,[["render",o]]);export{y as __pageData,u as default};

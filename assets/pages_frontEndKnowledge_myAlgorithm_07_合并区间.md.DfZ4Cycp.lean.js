import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"合并区间","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/07_合并区间.md","filePath":"pages/frontEndKnowledge/myAlgorithm/07_合并区间.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/07_合并区间.md"};function e(r,s,D,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="合并区间" tabindex="-1">合并区间 <a class="header-anchor" href="#合并区间" aria-label="Permalink to &quot;合并区间&quot;">​</a></h1><blockquote><p>力扣id=56 <a href="https://leetcode.cn/problems/merge-intervals/description/" target="_blank" rel="noreferrer">合并区间</a></p></blockquote><blockquote><p>题目： 以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p></blockquote><blockquote><p>示例 1：</p><blockquote><p>输入：intervals = [[1,3],[2,6],[8,10],[15,18]]</p><p>输出：[[1,6],[8,10],[15,18]]</p><p>解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p></blockquote></blockquote><blockquote><p>原理：</p><ol><li>先对区间数组进行排序，排序规则是按照区间的起始位置进行排序。</li><li>创建一个结果数组，用于存储合并后的区间。</li><li>遍历排序后的区间数组，对于每个区间，如果结果数组为空或者当前区间的起始位置大于结果数组中最后一个区间的结束位置，则将当前区间添加到结果数组中。</li><li>如果当前区间的起始位置小于等于结果数组中最后一个区间的结束位置，则更新结果数组中最后一个区间的结束位置为当前区间的结束位置和结果数组中最后一个区间的结束位置的较大值。</li></ol></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> merge</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  intervals</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sort</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> a</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] - </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]);</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]];</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> resLen</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] &gt; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">resLen</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#C586C0;">      continue</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      res</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">resLen</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">resLen</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#9CDCFE;">      res</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">resLen</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">intervals</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">resLen</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,6)]))}const E=n(o,[["render",e]]);export{i as __pageData,E as default};

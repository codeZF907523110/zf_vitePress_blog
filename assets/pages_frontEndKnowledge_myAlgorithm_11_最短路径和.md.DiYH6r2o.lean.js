import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"最短路径和","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/11_最短路径和.md","filePath":"pages/frontEndKnowledge/myAlgorithm/11_最短路径和.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/11_最短路径和.md"};function e(D,s,r,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="最短路径和" tabindex="-1">最短路径和 <a class="header-anchor" href="#最短路径和" aria-label="Permalink to &quot;最短路径和&quot;">​</a></h1><blockquote><p>力扣id=64 <a href="https://leetcode.cn/problems/minimum-path-sum/description/" target="_blank" rel="noreferrer">最短路径和</a></p></blockquote><blockquote><p>题目：</p><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p></blockquote><blockquote><p>示例： <img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="最短路径和"></p><blockquote><p>输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</p><p>输出：7</p><p>解释：因为路径 1→3→1→1→1 的总和最小。</p></blockquote></blockquote><blockquote><p>思路：</p><ul><li>计算第一行和第一列的最短路径和</li><li>从第二行和第二列开始，计算每个位置的最短路径和(dp[i][j] += Math.min(dp[i][j-1], dp[i-1][j]))</li></ul></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> minPathSum</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> rowLen</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">colLen</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">rowLen</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++)</span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] += </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">colLen</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++)</span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] += </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">rowLen</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">colLen</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#9CDCFE;">            dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">] += </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">rowLen</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">colLen</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,6)]))}const E=n(o,[["render",e]]);export{i as __pageData,E as default};

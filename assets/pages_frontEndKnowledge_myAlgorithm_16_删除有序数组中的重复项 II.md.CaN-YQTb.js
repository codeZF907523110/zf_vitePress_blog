import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const C=JSON.parse('{"title":"删除有序数组中的重复项 II","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/16_删除有序数组中的重复项 II.md","filePath":"pages/frontEndKnowledge/myAlgorithm/16_删除有序数组中的重复项 II.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/16_删除有序数组中的重复项 II.md"};function e(t,s,r,c,D,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="删除有序数组中的重复项-ii" tabindex="-1">删除有序数组中的重复项 II <a class="header-anchor" href="#删除有序数组中的重复项-ii" aria-label="Permalink to &quot;删除有序数组中的重复项 II&quot;">​</a></h1><blockquote><p>力扣id=80 <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="noreferrer">删除有序数组中的重复项 II</a></p></blockquote><blockquote><p>题目：</p><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p></blockquote><blockquote><p>示例 1：</p><blockquote><p>输入：nums = [1,1,1,2,2,3]</p><p>输出：5, nums = [1,1,2,2,3]</p><p>解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。</p></blockquote></blockquote><blockquote><p>思路：</p><ol><li>创建两个指针，j 表示当前遍历的位置，i表示当前要修改的位置</li><li>创建count变量用来记录当前元素出现的次数</li><li>遍历数组，如果当前元素和前一个元素相同，则count加一，否则重置count为0</li><li>如果count小于等于2，则将当前元素赋值给i位置，并将i加一</li></ol></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> removeDuplicates</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] === </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">] ? </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">++ : </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        nums</span><span style="color:#D4D4D4;">[++</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#9CDCFE;">      j</span><span style="color:#D4D4D4;">++</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,6)]))}const u=n(o,[["render",e]]);export{C as __pageData,u as default};

import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"二叉树的遍历","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/18_二叉树.md","filePath":"pages/frontEndKnowledge/myAlgorithm/18_二叉树.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/18_二叉树.md"};function e(r,s,D,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="二叉树的遍历" tabindex="-1">二叉树的遍历 <a class="header-anchor" href="#二叉树的遍历" aria-label="Permalink to &quot;二叉树的遍历&quot;">​</a></h1><h2 id="前序遍历" tabindex="-1">前序遍历 <a class="header-anchor" href="#前序遍历" aria-label="Permalink to &quot;前序遍历&quot;">​</a></h2><ol><li>递归</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> preorderTraversal</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> loop</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#9CDCFE;">    res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">    loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">    loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#DCDCAA;">  loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>迭代</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> preorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">], </span><span style="color:#4FC1FF;">res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> item</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="中序遍历" tabindex="-1">中序遍历 <a class="header-anchor" href="#中序遍历" aria-label="Permalink to &quot;中序遍历&quot;">​</a></h2><ol><li>递归</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> inorderTraversal</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> loop</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#DCDCAA;">    loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">    res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">    loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#DCDCAA;">  loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>迭代</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#DCDCAA;"> inorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> stack</span><span style="color:#D4D4D4;"> = [], </span><span style="color:#4FC1FF;">res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">        root</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> item</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">        root</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="后序遍历" tabindex="-1">后序遍历 <a class="header-anchor" href="#后序遍历" aria-label="Permalink to &quot;后序遍历&quot;">​</a></h2><ol><li>递归</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> postorderTraversal</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> loop</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#DCDCAA;">    loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">    loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">    res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#DCDCAA;">  loop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>迭代</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> postorderTraversal</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">], </span><span style="color:#4FC1FF;">res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> item</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unshift</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="二叉树的层级遍历" tabindex="-1">二叉树的层级遍历 <a class="header-anchor" href="#二叉树的层级遍历" aria-label="Permalink to &quot;二叉树的层级遍历&quot;">​</a></h2><blockquote><p>力扣id=102 <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/" target="_blank" rel="noreferrer">二叉树的层序遍历</a></p></blockquote><blockquote><p>题目： 给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> levelOrder</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> stack</span><span style="color:#D4D4D4;"> = [[</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">]], </span><span style="color:#4FC1FF;">res</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">([])</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> node</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">            item</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">            item</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">            item</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">].</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#9CDCFE;">        arr</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="相同的树" tabindex="-1">相同的树 <a class="header-anchor" href="#相同的树" aria-label="Permalink to &quot;相同的树&quot;">​</a></h2><blockquote><p>力扣id=100 <a href="https://leetcode.cn/problems/same-tree/" target="_blank" rel="noreferrer">相同的树</a></p></blockquote><blockquote><p>题目： 判断两个二叉树是否完全相同</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">  var</span><span style="color:#DCDCAA;"> isSameTree</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> &amp;&amp; !</span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> true</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> ((!</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> || !</span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">) || (</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> false</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> isSameTree</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">) &amp;&amp; </span><span style="color:#DCDCAA;">isSameTree</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="对称二叉树" tabindex="-1">对称二叉树 <a class="header-anchor" href="#对称二叉树" aria-label="Permalink to &quot;对称二叉树&quot;">​</a></h2><blockquote><p>力扣id=101 <a href="https://leetcode.cn/problems/symmetric-tree/" target="_blank" rel="noreferrer">对称二叉树</a></p></blockquote><blockquote><p>题目：判断一个二叉树是否为对称二叉树</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> isSymmetric</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> isSymmetricalTree</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;"> &amp;&amp; !</span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> true</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> ((!</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;"> || !</span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">) || (</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> false</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#DCDCAA;"> isSymmetricalTree</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) &amp;&amp; </span><span style="color:#DCDCAA;">isSymmetricalTree</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> isSymmetricalTree</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二叉树的最大深度" tabindex="-1">二叉树的最大深度 <a class="header-anchor" href="#二叉树的最大深度" aria-label="Permalink to &quot;二叉树的最大深度&quot;">​</a></h2><blockquote><p>力扣id=104 <a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noreferrer">二叉树的最大深度</a></p></blockquote><blockquote><p>题目：给定一个二叉树，找出其最大深度。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> maxDepth</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> left</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">maxDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> right</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">maxDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="二叉树的最小深度" tabindex="-1">二叉树的最小深度 <a class="header-anchor" href="#二叉树的最小深度" aria-label="Permalink to &quot;二叉树的最小深度&quot;">​</a></h2><blockquote><p>力扣id=111 <a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noreferrer">二叉树的最小深度</a></p></blockquote><blockquote><p>题目：给定一个二叉树，找出其最小深度。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> minDepth</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> left</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">minDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> right</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">minDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> || !</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h2><blockquote><p>力扣id=110 <a href="https://leetcode.cn/problems/balanced-binary-tree/" target="_blank" rel="noreferrer">平衡二叉树</a></p></blockquote><blockquote><p>题目：给定一个二叉树，判断它是否是高度平衡的二叉树。平衡二叉树 是指该树所有节点的左右子树的高度相差不超过 1。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> isBalanced</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> isPingHeng</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> left</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">isPingHeng</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> right</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">isPingHeng</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">abs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">-</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) &gt; </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> === -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> === -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#DCDCAA;"> isPingHeng</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) !== -</span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="路径总和" tabindex="-1">路径总和 <a class="header-anchor" href="#路径总和" aria-label="Permalink to &quot;路径总和&quot;">​</a></h2><blockquote><p>力扣id=112 <a href="https://leetcode.cn/problems/path-sum/" target="_blank" rel="noreferrer">路径总和</a></p></blockquote><blockquote><p>题目：</p><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> hasPathSum</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">targetSum</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> flag</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> dfs</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> left</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> right</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &amp;&amp; !</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">targetSum</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">            flag</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#9CDCFE;">        left</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;">+</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">        right</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;">+</span><span style="color:#9CDCFE;">node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#DCDCAA;">    dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> flag</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="合并二叉树" tabindex="-1">合并二叉树 <a class="header-anchor" href="#合并二叉树" aria-label="Permalink to &quot;合并二叉树&quot;">​</a></h2><blockquote><p>力扣id=617 <a href="https://leetcode.cn/problems/merge-two-binary-trees/" target="_blank" rel="noreferrer">合并二叉树</a></p></blockquote><blockquote><p>题目：</p><p>给你两棵二叉树： root1 和 root2 。 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。 返回合并后的二叉树。 注意: 合并过程必须从两个树的根节点开始。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> mergeTrees</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">root2</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root1</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#9CDCFE;"> roots</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root2</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#9CDCFE;"> root1</span></span>
<span class="line"><span style="color:#9CDCFE;">  root1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">root2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span></span>
<span class="line"><span style="color:#9CDCFE;">  root1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">  = </span><span style="color:#DCDCAA;">mergeTrees</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">root2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  root1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">mergeTrees</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root1</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">root2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> root1</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,48)]))}const b=n(o,[["render",e]]);export{i as __pageData,b as default};

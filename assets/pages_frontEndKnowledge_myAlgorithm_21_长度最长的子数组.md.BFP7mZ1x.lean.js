import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"长度最小的子数组","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/21_长度最长的子数组.md","filePath":"pages/frontEndKnowledge/myAlgorithm/21_长度最长的子数组.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/21_长度最长的子数组.md"};function e(r,s,D,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="长度最小的子数组" tabindex="-1">长度最小的子数组 <a class="header-anchor" href="#长度最小的子数组" aria-label="Permalink to &quot;长度最小的子数组&quot;">​</a></h1><blockquote><p>力扣id: 209 <a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/" target="_blank" rel="noreferrer">长度最小的子数组</a></p></blockquote><blockquote><p>题目：</p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。 找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> 。</p></blockquote><blockquote><p>示例 1：</p><blockquote><p>输入：target = 7, nums = [2,3,1,2,4,3]</p><p>输出：2</p><p>解释：子数组 [4,3] 是该条件下的长度最小的子数组。</p></blockquote></blockquote><blockquote><p>思路：</p><ol><li>滑动窗口</li><li>遍历数组，如果当前元素大于等于target，则将窗口左边界移动到当前元素位置，并更新最小长度。</li><li>如果当前元素小于target，则将窗口右边界向右移动一位，并更新总和。</li><li>循环结束后，返回最小长度。</li></ol></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> minSubArrayLen</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">            res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">            sum</span><span style="color:#D4D4D4;"> -= </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#9CDCFE;">            i</span><span style="color:#D4D4D4;">++</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">            j</span><span style="color:#D4D4D4;">++</span></span>
<span class="line"><span style="color:#9CDCFE;">            sum</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,6)]))}const m=n(o,[["render",e]]);export{i as __pageData,m as default};

import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D3lXAOHM.js";const C=JSON.parse('{"title":"最长递增子序列","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/23_最长递增子序列.md","filePath":"pages/frontEndKnowledge/myAlgorithm/23_最长递增子序列.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/23_最长递增子序列.md"};function e(D,s,r,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="最长递增子序列" tabindex="-1">最长递增子序列 <a class="header-anchor" href="#最长递增子序列" aria-label="Permalink to &quot;最长递增子序列&quot;">​</a></h1><blockquote><p>力扣id: 300 <a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/" target="_blank" rel="noreferrer">最长递增子序列</a></p></blockquote><blockquote><p>题目：</p><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。 子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p></blockquote><blockquote><p>示例 1：</p><blockquote><p>输入：nums = [10,9,2,5,3,7,101,18]</p><p>输出：4</p><p>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p></blockquote></blockquote><blockquote><p>思路：</p><ul><li>动态规划（DP）解法：</li><li>状态定义：dp[i] 表示以 nums[i] 结尾的最长递增子序列的长度。</li><li>dp[i] = max(dp[j] + 1) 其中 0 &lt;= j &lt; i 且 nums[j] &lt; nums[i]</li><li>如果没有满足条件的 j，则 dp[i] = 1。</li><li>初始化：所有 dp[i] 初始化为 1，因为每个元素本身可以看作是一个长度为 1 的递增子序列。</li><li>结果：遍历完数组后，dp 数组中的最大值即为最长递增子序列的长度。</li></ul></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> lengthOfLIS</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> dp</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Array</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">fill</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] &gt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">]) {</span><span style="color:#6A9955;">//当nums[i] &gt; nums[j]，则构成一个上升对</span></span>
<span class="line"><span style="color:#9CDCFE;">                dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">] = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">], </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">] + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">//更新dp[i]</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#9CDCFE;">        result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">dp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]);</span><span style="color:#6A9955;">//更新结果</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,6)]))}const u=n(o,[["render",e]]);export{C as __pageData,u as default};

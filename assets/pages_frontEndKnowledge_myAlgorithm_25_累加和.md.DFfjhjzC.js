import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D3lXAOHM.js";const i=JSON.parse('{"title":"累加和","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/25_累加和.md","filePath":"pages/frontEndKnowledge/myAlgorithm/25_累加和.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/25_累加和.md"};function e(D,s,r,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="累加和" tabindex="-1">累加和 <a class="header-anchor" href="#累加和" aria-label="Permalink to &quot;累加和&quot;">​</a></h1><blockquote><p>力扣id=303 <a href="https://leetcode.cn/problems/additive-number/description/" target="_blank" rel="noreferrer">累加和</a></p></blockquote><blockquote><p>题目：</p><p>累加数 是一个字符串，组成它的数字可以形成累加序列。一个有效的 累加序列 必须 至少 包含 3 个数。除了最开始的两个数以外，序列中的每个后续数字必须是它之前两个数字之和。给你一个只包含数字 &#39;0&#39;-&#39;9&#39; 的字符串，编写一个算法来判断给定输入是否是 累加数 。如果是，返回 true ；否则，返回 false 。</p><p>说明：累加序列里的数，除数字 0 之外，不会 以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。</p></blockquote><blockquote><p>示例1:</p><blockquote><p>输入：&quot;112358&quot;</p><p>输出：true</p><p>解释：累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</p></blockquote></blockquote><blockquote><p>示例2:</p><blockquote><p>输入：&quot;199100199&quot;</p><p>输出：true</p><p>解释：累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199</p></blockquote></blockquote><blockquote><p>思路:</p><ol><li>双层循环遍历，取l和r，如[1, 9], [1, 99], [1, 991]...[19, 9], [19, 91]...</li><li>获取l+r的值，并且，按位数判断后面的数字是否和l+r相等，如 [1, 99]和后面的100相等</li><li>如果相等就while循环往后遍历，遍历过程中如果发现不相等就跳出循环，如果while循环结束，并且now+k大于等于num.length，则返回true</li><li>while循环中每次匹配成功，则进行向后移位，l=r，r=temp，now += temp.length</li></ol></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> isAdditiveNumber</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> add</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> data</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">parseInt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">) + </span><span style="color:#DCDCAA;">parseInt</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> data</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toString</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> l</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substr</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> r</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">substr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> ((</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> !== </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;">) || (</span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> !== </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] === </span><span style="color:#CE9178;">&#39;0&#39;</span><span style="color:#D4D4D4;">)) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> false</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> now</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#C586C0;">      while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">now</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">        const</span><span style="color:#4FC1FF;"> temp</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">l</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">r</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">        let</span><span style="color:#9CDCFE;"> k</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">          f</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#C586C0;">        for</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#C586C0;">          if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">now</span><span style="color:#D4D4D4;">] !== </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#9CDCFE;">            f</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#C586C0;">            break</span></span>
<span class="line"><span style="color:#D4D4D4;">          }</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">now</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">        if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">break</span></span>
<span class="line"><span style="color:#9CDCFE;">        l</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">r</span></span>
<span class="line"><span style="color:#9CDCFE;">        r</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">temp</span></span>
<span class="line"><span style="color:#9CDCFE;">        now</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">temp</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> false</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,7)]))}const b=n(o,[["render",e]]);export{i as __pageData,b as default};

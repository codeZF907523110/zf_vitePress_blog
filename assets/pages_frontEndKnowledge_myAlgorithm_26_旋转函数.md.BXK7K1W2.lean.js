import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"旋转函数","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/26_旋转函数.md","filePath":"pages/frontEndKnowledge/myAlgorithm/26_旋转函数.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/26_旋转函数.md"};function e(r,s,t,D,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="旋转函数" tabindex="-1">旋转函数 <a class="header-anchor" href="#旋转函数" aria-label="Permalink to &quot;旋转函数&quot;">​</a></h1><blockquote><p>力扣id=396 <a href="https://leetcode.cn/problems/rotate-function/description/" target="_blank" rel="noreferrer">text</a></p></blockquote><blockquote><p>题目：</p><p>给定一个长度为 n 的整数数组 nums 。假设 arrk 是数组 nums 顺时针旋转 k 个位置后的数组，我们定义 nums 的 旋转函数 F 为：F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1]，返回 F(0), F(1), ..., F(n-1)中的最大值 。</p></blockquote><blockquote><p>示例：</p><blockquote><p>输入: nums = [4,3,2,6]</p><p>输出: 26</p></blockquote></blockquote><blockquote><p>思路：</p><ul><li>找规律: f(n) = f(n - 1) + s(len) - len * a(len - n)</li></ul></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> maxRotateFunction</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> f</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">sum</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">*</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">f</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">=</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&gt;</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">--) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        f</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">sum</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;"> * </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">f</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,6)]))}const u=n(o,[["render",e]]);export{i as __pageData,u as default};

import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const m=JSON.parse('{"title":"最小操作次数使数组元素相等","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/27_最小操作次数使数组元素相等.md","filePath":"pages/frontEndKnowledge/myAlgorithm/27_最小操作次数使数组元素相等.md","lastUpdated":1744461726000}'),e={name:"pages/frontEndKnowledge/myAlgorithm/27_最小操作次数使数组元素相等.md"};function o(t,s,r,c,D,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="最小操作次数使数组元素相等" tabindex="-1">最小操作次数使数组元素相等 <a class="header-anchor" href="#最小操作次数使数组元素相等" aria-label="Permalink to &quot;最小操作次数使数组元素相等&quot;">​</a></h1><blockquote><p>力扣id=453 <a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements/description/" target="_blank" rel="noreferrer">最小操作次数使数组元素相等</a></p></blockquote><blockquote><p>题目：</p><p>给你一个长度为 n 的整数数组，每次操作将会使 n - 1 个元素增加 1 。返回让数组所有元素相等的最小操作次数。</p></blockquote><blockquote><p>示例:</p><blockquote><p>输入：nums = [1,2,3]</p><p>输出：3</p><p>解释：</p><p>只需要3次操作（注意每次操作会增加两个元素的值）：</p><p>[1,2,3] =&gt; [2,3,3] =&gt; [3,4,3] =&gt; [4,4,4]</p></blockquote></blockquote><blockquote><p>思路：</p><ul><li>找到最小值，然后每个元素都减去最小值，然后求和</li></ul></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> minMoves</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> minNum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">min</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> num</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> nums</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        res</span><span style="color:#D4D4D4;"> += </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;"> - </span><span style="color:#9CDCFE;">minNum</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,6)]))}const y=n(e,[["render",o]]);export{m as __pageData,y as default};

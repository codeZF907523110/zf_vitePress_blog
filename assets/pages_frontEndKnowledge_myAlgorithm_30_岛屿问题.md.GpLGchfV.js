import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"岛屿问题","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/myAlgorithm/30_岛屿问题.md","filePath":"pages/frontEndKnowledge/myAlgorithm/30_岛屿问题.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/myAlgorithm/30_岛屿问题.md"};function e(D,s,r,t,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="岛屿问题" tabindex="-1">岛屿问题 <a class="header-anchor" href="#岛屿问题" aria-label="Permalink to &quot;岛屿问题&quot;">​</a></h1><blockquote><p>力扣id=695 <a href="https://leetcode.cn/problems/max-area-of-island/description/" target="_blank" rel="noreferrer">岛屿问题</a></p></blockquote><blockquote><p>题目：</p><p>给你一个大小为 m x n 的二进制矩阵 grid 。岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。岛屿的面积是岛上值为 1 的单元格的数目。计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 。</p></blockquote><blockquote><p>示例 1：</p><blockquote><p>输入：<code>grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]</code></p><p>输出：6</p><p>解释：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</p></blockquote></blockquote><blockquote><p>原理：</p><ul><li>岛屿问题，可以使用深度优先搜索（DFS）</li><li>dfs中在四个方向去查询，并且每次查询都将本次置为0，防止再次查询</li></ul></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> maxAreaOfIsland</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> h</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">w</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">].</span><span style="color:#9CDCFE;">length</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> dfs</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">&lt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &gt;= </span><span style="color:#9CDCFE;">h</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">&gt;=</span><span style="color:#9CDCFE;">w</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">grid</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">] === </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#B5CEA8;"> 0</span></span>
<span class="line"><span style="color:#9CDCFE;">    grid</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">][</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">] = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;"> + </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">) + </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">) + </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) + </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">h</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> j</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#9CDCFE;">w</span><span style="color:#D4D4D4;">;</span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">++) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">j</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,6)]))}const E=n(o,[["render",e]]);export{i as __pageData,E as default};

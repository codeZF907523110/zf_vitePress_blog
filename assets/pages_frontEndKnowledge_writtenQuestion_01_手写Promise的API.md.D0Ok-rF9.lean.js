import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const i=JSON.parse('{"title":"简单实现一个promise","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/writtenQuestion/01_手写Promise的API.md","filePath":"pages/frontEndKnowledge/writtenQuestion/01_手写Promise的API.md","lastUpdated":1744461726000}'),e={name:"pages/frontEndKnowledge/writtenQuestion/01_手写Promise的API.md"};function o(D,s,r,c,t,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="简单实现一个promise" tabindex="-1">简单实现一个promise <a class="header-anchor" href="#简单实现一个promise" aria-label="Permalink to &quot;简单实现一个promise&quot;">​</a></h1><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> MyPromise</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">executor</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;pending&#39;</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 初始状态</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 成功时的值</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">undefined</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 失败时的原因</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onFulfilledCallbacks</span><span style="color:#D4D4D4;"> = []; </span><span style="color:#6A9955;">// 成功回调队列</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onRejectedCallbacks</span><span style="color:#D4D4D4;"> = []; </span><span style="color:#6A9955;">// 失败回调队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 成功回调</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;pending&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;fulfilled&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">        // 执行所有成功回调</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onFulfilledCallbacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 失败回调</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#DCDCAA;"> reject</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;pending&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;rejected&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#6A9955;">        // 执行所有失败回调</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onRejectedCallbacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fn</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // 执行 executor</span></span>
<span class="line"><span style="color:#C586C0;">    try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">      executor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">      reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 捕获 executor 中的错误</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // then 方法</span></span>
<span class="line"><span style="color:#DCDCAA;">  then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">onFulfilled</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onRejected</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">    // 因为then可以链式调用，所以这里需要返回一个promise</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // 成功回调</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#DCDCAA;"> fulfilledHandler</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">        try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">          if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> onFulfilled</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;function&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">onFulfilled</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">            // 如果返回值是 Promise，则等待其完成</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">result</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> MyPromise</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">              result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">              resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">          } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">            resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 透传值</span></span>
<span class="line"><span style="color:#D4D4D4;">          }</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">          reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 捕获错误</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">      // 失败回调</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#DCDCAA;"> rejectedHandler</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">        try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">          if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> onRejected</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;function&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">            const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">onRejected</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">            // 如果返回值是 Promise，则等待其完成</span></span>
<span class="line"><span style="color:#C586C0;">            if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">result</span><span style="color:#569CD6;"> instanceof</span><span style="color:#4EC9B0;"> MyPromise</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">              result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">              resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 错误被处理，返回成功状态</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">          } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">            reject</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 透传错误</span></span>
<span class="line"><span style="color:#D4D4D4;">          }</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">          reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 捕获错误</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">      // 根据当前状态执行回调</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;fulfilled&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">        setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fulfilledHandler</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 异步执行</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;rejected&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">        setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">rejectedHandler</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 异步执行</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#C586C0;"> if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">status</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;pending&#39;</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">        // 如果状态未确定，将回调加入队列</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onFulfilledCallbacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fulfilledHandler</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#569CD6;">        this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">onRejectedCallbacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setTimeout</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">rejectedHandler</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    });</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // catch 方法</span></span>
<span class="line"><span style="color:#DCDCAA;">  catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">onRejected</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">onRejected</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 静态方法：resolve</span></span>
<span class="line"><span style="color:#569CD6;">  static</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 静态方法：reject</span></span>
<span class="line"><span style="color:#569CD6;">  static</span><span style="color:#DCDCAA;"> reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">_</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">reason</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 测试</span></span>
<span class="line"><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;111&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#DCDCAA;">  resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;222&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> new</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">      resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">333</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">  .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br></div></div><h1 id="手写-promise-all" tabindex="-1">手写 Promise.all() <a class="header-anchor" href="#手写-promise-all" aria-label="Permalink to &quot;手写 Promise.all()&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Promise.all()</p><p><code>Promise.all()</code>接收一个 promise 数组，返回一个 promise，当所有 promise 都成功时，返回一个成功的 promise，当有一个 promise 失败时，返回一个失败的 promise</p></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">myAll</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">promiseList</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> arr</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#9CDCFE;">    promiseList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      item</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">          arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">          if</span><span style="color:#D4D4D4;"> (++</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">promiseList</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        })</span></span>
<span class="line"><span style="color:#D4D4D4;">        .</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">          reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        })</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h1 id="手写-promise-race" tabindex="-1">手写 Promise.race() <a class="header-anchor" href="#手写-promise-race" aria-label="Permalink to &quot;手写 Promise.race()&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Promise.race()</p><p><code>Promise.race()</code>接收一个 Promise 数组，返回一个 Promise，这个 Promise 的状态由第一个完成的 Promise 决定，如果第一个 Promise 状态为 fulfilled，则返回第一个 Promise 的值，如果第一个 Promise 状态为 rejected，则返回第一个 Promise 的值。</p></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">myRace</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">promiseList</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    promiseList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      item</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> reject</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,8)]))}const b=n(e,[["render",o]]);export{i as __pageData,b as default};

import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D3lXAOHM.js";const C=JSON.parse('{"title":"手写 apply、call、bind","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/writtenQuestion/03_手写apply、call、bind.md","filePath":"pages/frontEndKnowledge/writtenQuestion/03_手写apply、call、bind.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/writtenQuestion/03_手写apply、call、bind.md"};function e(r,s,t,c,D,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="手写-apply、call、bind" tabindex="-1">手写 apply、call、bind <a class="header-anchor" href="#手写-apply、call、bind" aria-label="Permalink to &quot;手写 apply、call、bind&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>作用：这三个函数的主要作用是改变当前函数的 this 指向，区别在于</p><ol><li>apply 的第二个参数是一个数组</li><li>call 的第二个参数是一个参数序列，可以用...arg,或者 arguments 进行接收</li><li>bind 比较复杂，bind 会返回一个新的函数 fn，fn 可以传入参数，执行 fn 时会将调用 bind 时传的参数和 fn 传的参数一起执行，如：(bind 与 call 入参一致，都是参数序列)</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 注意：func有四个参数</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> func</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">c</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">d</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &#39;哈哈哈&#39;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#6A9955;">// 这里只传了三个参数</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">func</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">bind</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">// 这里传了第四个参数</span></span>
<span class="line"><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// 输出  哈哈哈  1 2 3 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-pwKl0" id="tab-nyabi6U" checked><label data-title="apply" for="tab-nyabi6U">apply</label><input type="radio" name="group-pwKl0" id="tab-zsbCgzH"><label data-title="call" for="tab-zsbCgzH">call</label><input type="radio" name="group-pwKl0" id="tab-dCyl6fy"><label data-title="bind" for="tab-dCyl6fy">bind</label></div><div class="blocks"><div class="language-ts active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">Function</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">myApply</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;"> = []) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  thisArg</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">window</span></span>
<span class="line"><span style="color:#9CDCFE;">  thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  delete</span><span style="color:#9CDCFE;"> thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">Function</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">myCall</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  args</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;"> || []</span></span>
<span class="line"><span style="color:#9CDCFE;">  thisArg</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">window</span></span>
<span class="line"><span style="color:#9CDCFE;">  thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  delete</span><span style="color:#9CDCFE;"> thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#4EC9B0;">Function</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">myBind</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">  thisArg</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">window</span></span>
<span class="line"><span style="color:#9CDCFE;">  args1</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">args1</span><span style="color:#D4D4D4;"> || []</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> that</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> (...</span><span style="color:#9CDCFE;">args2</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">fn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">that</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thisArg</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fn</span><span style="color:#D4D4D4;">(...</span><span style="color:#9CDCFE;">args1</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> res</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div></div>`,3)]))}const b=n(o,[["render",e]]);export{C as __pageData,b as default};

import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D3lXAOHM.js";const C=JSON.parse('{"title":"实现一个 new 函数","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/writtenQuestion/05_实现一个new函数.md","filePath":"pages/frontEndKnowledge/writtenQuestion/05_实现一个new函数.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/writtenQuestion/05_实现一个new函数.md"};function e(r,s,t,c,D,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="实现一个-new-函数" tabindex="-1">实现一个 new 函数 <a class="header-anchor" href="#实现一个-new-函数" aria-label="Permalink to &quot;实现一个 new 函数&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title"><strong>new 具体做了什么，实现思路是什么样的呢</strong></p><ol><li>创建一个新对象 obj</li><li>利用 Object.create()将 obj 的原型指向构造函数的原型</li><li>利用 constructor.apply()将 obj 作用域指向构造函数的作用域 this</li><li>执行构造函数，将新的参数添加到构造函数中</li><li>如果构造函数有显式返回一个对象，则返回该对象；否则，返回新对象</li></ol><p><strong>实现：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> myNew</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">, ...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> obj</span><span style="color:#D4D4D4;"> = {}</span></span>
<span class="line"><span style="color:#9CDCFE;">  obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> === </span><span style="color:#4EC9B0;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> res</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">constructor</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">apply</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> typeof</span><span style="color:#9CDCFE;"> res</span><span style="color:#D4D4D4;"> === </span><span style="color:#CE9178;">&#39;object&#39;</span><span style="color:#D4D4D4;"> ? </span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;"> : </span><span style="color:#9CDCFE;">obj</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> Person</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> person</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">MyNew</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Person</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;张三&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div>`,2)]))}const b=n(o,[["render",e]]);export{C as __pageData,b as default};

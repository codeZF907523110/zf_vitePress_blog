import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D1tMLlJQ.js";const C=JSON.parse('{"title":"深度优先遍历(DFS)和广度优先遍历(BFS)","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/writtenQuestion/10_深度优先遍历(DFS)和广度优先遍历(BFS).md","filePath":"pages/frontEndKnowledge/writtenQuestion/10_深度优先遍历(DFS)和广度优先遍历(BFS).md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/writtenQuestion/10_深度优先遍历(DFS)和广度优先遍历(BFS).md"};function e(r,s,t,c,D,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="深度优先遍历-dfs-和广度优先遍历-bfs" tabindex="-1">深度优先遍历(DFS)和广度优先遍历(BFS) <a class="header-anchor" href="#深度优先遍历-dfs-和广度优先遍历-bfs" aria-label="Permalink to &quot;深度优先遍历(DFS)和广度优先遍历(BFS)&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title"><strong>深度优先遍历（DFS）</strong></p><ul><li><strong>方法一：递归</strong></li></ul><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> dfs</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span></span>
<span class="line"><span style="color:#C586C0;">    for</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#DCDCAA;">      dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><strong>方法二：迭代</strong></li></ul><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> dfs</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> stack</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">      for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;">  item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="tip custom-block"><p class="custom-block-title"><strong>广度优先遍历（BFS）</strong></p><ul><li><strong>方法一：迭代</strong></li></ul><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> bfs</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> stack</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">      const</span><span style="color:#4FC1FF;"> node</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">      for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> node</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">children</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        stack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div>`,3)]))}const d=n(o,[["render",e]]);export{C as __pageData,d as default};

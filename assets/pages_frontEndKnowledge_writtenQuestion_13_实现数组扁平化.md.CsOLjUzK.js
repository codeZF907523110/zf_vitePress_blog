import{_ as n,c as a,aQ as l,o as p}from"./chunks/framework.D3lXAOHM.js";const C=JSON.parse('{"title":"实现数组扁平化方法 float","description":"","frontmatter":{},"headers":[],"relativePath":"pages/frontEndKnowledge/writtenQuestion/13_实现数组扁平化.md","filePath":"pages/frontEndKnowledge/writtenQuestion/13_实现数组扁平化.md","lastUpdated":1744461726000}'),o={name:"pages/frontEndKnowledge/writtenQuestion/13_实现数组扁平化.md"};function e(r,s,t,D,c,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="实现数组扁平化方法-float" tabindex="-1">实现数组扁平化方法 float <a class="header-anchor" href="#实现数组扁平化方法-float" aria-label="Permalink to &quot;实现数组扁平化方法 float&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">实现数组扁平化</p><ul><li>使用递归实现</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> float</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> result</span><span style="color:#D4D4D4;"> = []</span></span>
<span class="line"><span style="color:#C586C0;">  for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> item</span><span style="color:#569CD6;"> of</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(...</span><span style="color:#DCDCAA;">float</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">      result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> result</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>使用 reduce 实现</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus vp-code" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> float</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">arr</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> arr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">reduce</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">pre</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">curr</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curr</span><span style="color:#D4D4D4;">) ? </span><span style="color:#9CDCFE;">pre</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">float</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curr</span><span style="color:#D4D4D4;">)) : </span><span style="color:#9CDCFE;">pre</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curr</span><span style="color:#D4D4D4;">)), [])</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div>`,2)]))}const u=n(o,[["render",e]]);export{C as __pageData,u as default};
